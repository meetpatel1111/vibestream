package com.vibestream.player.domain.player

import com.vibestream.player.data.model.MediaItem\nimport com.vibestream.player.data.model.MediaType\nimport kotlinx.coroutines.test.runTest\nimport org.junit.Assert.*\nimport org.junit.Before\nimport org.junit.Test\nimport org.mockito.Mock\nimport org.mockito.MockitoAnnotations\nimport org.mockito.kotlin.whenever\n\n/**\n * Unit tests for PlaybackController\n */\nclass PlaybackControllerTest {\n    \n    @Mock\n    private lateinit var mockPlayer: Player\n    \n    private lateinit var playbackController: PlaybackController\n    \n    private val testMediaItems = listOf(\n        MediaItem(\n            id = \"1\",\n            uri = \"file:///test1.mp4\",\n            type = MediaType.VIDEO,\n            title = \"Test Video 1\",\n            duration = 120000L\n        ),\n        MediaItem(\n            id = \"2\",\n            uri = \"file:///test2.mp4\",\n            type = MediaType.VIDEO,\n            title = \"Test Video 2\",\n            duration = 180000L\n        ),\n        MediaItem(\n            id = \"3\",\n            uri = \"file:///test3.mp3\",\n            type = MediaType.AUDIO,\n            title = \"Test Audio\",\n            duration = 240000L\n        )\n    )\n    \n    @Before\n    fun setup() {\n        MockitoAnnotations.openMocks(this)\n        playbackController = PlaybackController(mockPlayer)\n    }\n    \n    @Test\n    fun `setQueue should update queue and current index`() = runTest {\n        // When\n        playbackController.setQueue(testMediaItems, startIndex = 1)\n        \n        // Then\n        assertEquals(testMediaItems, playbackController.queue.value)\n        assertEquals(1, playbackController.currentIndex.value)\n    }\n    \n    @Test\n    fun `getCurrentItem should return correct item`() = runTest {\n        // Given\n        playbackController.setQueue(testMediaItems, startIndex = 0)\n        \n        // When\n        val currentItem = playbackController.getCurrentItem()\n        \n        // Then\n        assertEquals(testMediaItems[0], currentItem)\n    }\n    \n    @Test\n    fun `next should advance to next item`() = runTest {\n        // Given\n        playbackController.setQueue(testMediaItems, startIndex = 0)\n        \n        // When\n        playbackController.next()\n        \n        // Then\n        assertEquals(1, playbackController.currentIndex.value)\n    }\n    \n    @Test\n    fun `next at end should wrap to beginning`() = runTest {\n        // Given\n        playbackController.setQueue(testMediaItems, startIndex = 2)\n        \n        // When\n        playbackController.next()\n        \n        // Then\n        assertEquals(0, playbackController.currentIndex.value)\n    }\n    \n    @Test\n    fun `previous should go to previous item`() = runTest {\n        // Given\n        playbackController.setQueue(testMediaItems, startIndex = 1)\n        \n        // When\n        playbackController.previous()\n        \n        // Then\n        assertEquals(0, playbackController.currentIndex.value)\n    }\n    \n    @Test\n    fun `addToQueue should append items`() = runTest {\n        // Given\n        playbackController.setQueue(testMediaItems.take(2))\n        \n        // When\n        playbackController.addToQueue(listOf(testMediaItems[2]))\n        \n        // Then\n        assertEquals(3, playbackController.queue.value.size)\n        assertEquals(testMediaItems[2], playbackController.queue.value[2])\n    }\n    \n    @Test\n    fun `removeAt should remove item and adjust index`() = runTest {\n        // Given\n        playbackController.setQueue(testMediaItems, startIndex = 1)\n        \n        // When\n        playbackController.removeAt(0)\n        \n        // Then\n        assertEquals(2, playbackController.queue.value.size)\n        assertEquals(0, playbackController.currentIndex.value) // Index adjusted\n    }\n    \n    @Test\n    fun `setShuffle should generate shuffled indices`() = runTest {\n        // Given\n        playbackController.setQueue(testMediaItems)\n        \n        // When\n        playbackController.setShuffle(true)\n        \n        // Then\n        assertTrue(playbackController.shuffleEnabled.value)\n    }\n}"}, {"original_text": "", "replace_all": false}]