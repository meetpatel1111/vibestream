package com.vibestream.player.ui.screen.nowplaying

import androidx.compose.animation.AnimatedVisibility
import androidx.compose.foundation.background\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.foundation.shape.CircleShape\nimport androidx.compose.material.icons.Icons\nimport androidx.compose.material.icons.filled.PictureInPicture\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.*\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.draw.clip\nimport androidx.compose.ui.graphics.Color\nimport androidx.compose.ui.text.style.TextOverflow\nimport androidx.compose.ui.unit.dp\nimport com.vibestream.player.data.model.MediaItem\nimport com.vibestream.player.data.model.PlaybackState\nimport kotlin.math.roundToInt\n\n/**\n * Video surface component for rendering video content\n */\n@Composable\nfun VideoSurface(\n    modifier: Modifier = Modifier,\n    mediaItem: MediaItem?\n) {\n    Box(\n        modifier = modifier.background(Color.Black),\n        contentAlignment = Alignment.Center\n    ) {\n        if (mediaItem != null) {\n            // TODO: Integrate actual video rendering surface\n            // For now, show a placeholder\n            Text(\n                text = \"Video: ${mediaItem.title}\",\n                color = Color.White,\n                style = MaterialTheme.typography.headlineMedium\n            )\n        } else {\n            Text(\n                text = \"No media loaded\",\n                color = Color.Gray,\n                style = MaterialTheme.typography.bodyLarge\n            )\n        }\n    }\n}\n\n/**\n * Top controls with back button, title, and options\n */\n@Composable\nfun TopControls(\n    title: String,\n    onBack: () -> Unit,\n    onMoreOptions: () -> Unit,\n    modifier: Modifier = Modifier\n) {\n    Row(\n        modifier = modifier\n            .fillMaxWidth()\n            .background(\n                color = Color.Black.copy(alpha = 0.5f),\n                shape = MaterialTheme.shapes.medium\n            )\n            .padding(8.dp),\n        horizontalArrangement = Arrangement.SpaceBetween,\n        verticalAlignment = Alignment.CenterVertically\n    ) {\n        IconButton(\n            onClick = onBack,\n            modifier = Modifier\n                .clip(CircleShape)\n                .background(Color.Black.copy(alpha = 0.3f))\n        ) {\n            Icon(\n                imageVector = Icons.Default.ArrowBack,\n                contentDescription = \"Back\",\n                tint = Color.White\n            )\n        }\n        \n        Text(\n            text = title,\n            color = Color.White,\n            style = MaterialTheme.typography.titleMedium,\n            maxLines = 1,\n            overflow = TextOverflow.Ellipsis,\n            modifier = Modifier\n                .weight(1f)\n                .padding(horizontal = 16.dp)\n        )\n        \n        IconButton(\n            onClick = onMoreOptions,\n            modifier = Modifier\n                .clip(CircleShape)\n                .background(Color.Black.copy(alpha = 0.3f))\n        ) {\n            Icon(\n                imageVector = Icons.Default.MoreVert,\n                contentDescription = \"More options\",\n                tint = Color.White\n            )\n        }\n    }\n}\n\n/**\n * Bottom playback controls with seek bar and media buttons\n */\n@Composable\nfun PlaybackControls(\n    playbackState: PlaybackState,\n    currentPosition: Long,\n    duration: Long,\n    onPlayPause: () -> Unit,\n    onSeek: (Long) -> Unit,\n    onPrevious: () -> Unit,\n    onNext: () -> Unit,\n    modifier: Modifier = Modifier\n) {\n    Column(\n        modifier = modifier\n            .fillMaxWidth()\n            .background(\n                color = Color.Black.copy(alpha = 0.8f),\n                shape = MaterialTheme.shapes.medium\n            )\n            .padding(16.dp)\n    ) {\n        // Seek bar\n        SeekBar(\n            progress = if (duration > 0) currentPosition.toFloat() / duration else 0f,\n            onSeek = { progress ->\n                val position = (progress * duration).toLong()\n                onSeek(position)\n            },\n            modifier = Modifier.fillMaxWidth()\n        )\n        \n        // Time display\n        Row(\n            modifier = Modifier\n                .fillMaxWidth()\n                .padding(vertical = 8.dp),\n            horizontalArrangement = Arrangement.SpaceBetween\n        ) {\n            Text(\n                text = formatTime(currentPosition),\n                color = Color.White,\n                style = MaterialTheme.typography.bodySmall\n            )\n            Text(\n                text = formatTime(duration),\n                color = Color.White,\n                style = MaterialTheme.typography.bodySmall\n            )\n        }\n        \n        // Media control buttons\n        Row(\n            modifier = Modifier.fillMaxWidth(),\n            horizontalArrangement = Arrangement.SpaceEvenly,\n            verticalAlignment = Alignment.CenterVertically\n        ) {\n            IconButton(onClick = onPrevious) {\n                Icon(\n                    imageVector = Icons.Default.SkipPrevious,\n                    contentDescription = \"Previous\",\n                    tint = Color.White,\n                    modifier = Modifier.size(32.dp)\n                )\n            }\n            \n            IconButton(\n                onClick = onPlayPause,\n                modifier = Modifier\n                    .size(56.dp)\n                    .clip(CircleShape)\n                    .background(MaterialTheme.colorScheme.primary)\n            ) {\n                Icon(\n                    imageVector = if (playbackState.isPlaying) Icons.Default.Pause else Icons.Default.PlayArrow,\n                    contentDescription = if (playbackState.isPlaying) \"Pause\" else \"Play\",\n                    tint = Color.White,\n                    modifier = Modifier.size(32.dp)\n                )\n            }\n            \n            IconButton(onClick = onNext) {\n                Icon(\n                    imageVector = Icons.Default.SkipNext,\n                    contentDescription = \"Next\",\n                    tint = Color.White,\n                    modifier = Modifier.size(32.dp)\n                )\n            }\n        }\n    }\n}\n\n/**\n * Custom seek bar component\n */\n@Composable\nfun SeekBar(\n    progress: Float,\n    onSeek: (Float) -> Unit,\n    modifier: Modifier = Modifier\n) {\n    var isDragging by remember { mutableStateOf(false) }\n    var dragProgress by remember { mutableStateOf(0f) }\n    \n    val displayProgress = if (isDragging) dragProgress else progress\n    \n    Slider(\n        value = displayProgress,\n        onValueChange = { value ->\n            isDragging = true\n            dragProgress = value\n        },\n        onValueChangeFinished = {\n            onSeek(dragProgress)\n            isDragging = false\n        },\n        colors = SliderDefaults.colors(\n            thumbColor = MaterialTheme.colorScheme.primary,\n            activeTrackColor = MaterialTheme.colorScheme.primary,\n            inactiveTrackColor = Color.Gray\n        ),\n        modifier = modifier\n    )\n}\n\n/**\n * Format time in milliseconds to MM:SS or HH:MM:SS format\n */\nfun formatTime(timeMs: Long): String {\n    val totalSeconds = timeMs / 1000\n    val hours = totalSeconds / 3600\n    val minutes = (totalSeconds % 3600) / 60\n    val seconds = totalSeconds % 60\n    \n    return if (hours > 0) {\n        String.format(\"%d:%02d:%02d\", hours, minutes, seconds)\n    } else {\n        String.format(\"%d:%02d\", minutes, seconds)\n    }\n}"}, {"original_text": "", "replace_all": false}]