name: Build and Release

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ created ]

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 8.2

    - name: Setup Gradle Wrapper
      run: |
        # Create gradle wrapper directory if it doesn't exist
        mkdir -p gradle/wrapper
        
        # Download gradle-wrapper.jar if missing
        if [ ! -f gradle/wrapper/gradle-wrapper.jar ]; then
          echo "Downloading gradle-wrapper.jar..."
          curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.2.0/gradle/wrapper/gradle-wrapper.jar
        fi
        
        # Generate wrapper files if gradlew doesn't exist or is empty
        if [ ! -f gradlew ] || [ ! -s gradlew ]; then
          gradle wrapper --gradle-version 8.2
        fi
        
        # Ensure gradlew is executable
        chmod +x gradlew

    - name: Run unit tests
      run: |
        # Clean build first to avoid stale cache issues
        ./gradlew clean
        # Run tests with continue flag to see all test results
        ./gradlew test --continue

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          app/build/reports/tests/
          app/build/test-results/

  build:
    name: Build APK
    runs-on: ubuntu-latest
    needs: test

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 8.2

    - name: Setup Gradle Wrapper
      run: |
        # Create gradle wrapper directory if it doesn't exist
        mkdir -p gradle/wrapper
        
        # Download gradle-wrapper.jar if missing
        if [ ! -f gradle/wrapper/gradle-wrapper.jar ]; then
          echo "Downloading gradle-wrapper.jar..."
          curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.2.0/gradle/wrapper/gradle-wrapper.jar
        fi
        
        # Generate wrapper files if gradlew doesn't exist or is empty
        if [ ! -f gradlew ] || [ ! -s gradlew ]; then
          gradle wrapper --gradle-version 8.2
        fi
        
        # Ensure gradlew is executable
        chmod +x gradlew

    - name: Build Debug APK
      run: |
        # Clean build first to avoid stale cache issues
        ./gradlew clean
        ./gradlew assembleDebug

    - name: Build Release APK
      run: ./gradlew assembleRelease

    - name: Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/*.apk

    - name: Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: release-apk
        path: app/build/outputs/apk/release/*.apk

  build-bundle:
    name: Build AAB
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 8.2

    - name: Setup Gradle Wrapper
      run: |
        # Create gradle wrapper directory if it doesn't exist
        mkdir -p gradle/wrapper
        
        # Download gradle-wrapper.jar if missing
        if [ ! -f gradle/wrapper/gradle-wrapper.jar ]; then
          echo "Downloading gradle-wrapper.jar..."
          curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.2.0/gradle/wrapper/gradle-wrapper.jar
        fi
        
        # Generate wrapper files if gradlew doesn't exist or is empty
        if [ ! -f gradlew ] || [ ! -s gradlew ]; then
          gradle wrapper --gradle-version 8.2
        fi
        
        # Ensure gradlew is executable
        chmod +x gradlew

    - name: Build Release AAB
      run: |
        # Clean build first to avoid stale cache issues
        ./gradlew clean
        ./gradlew bundleRelease

    - name: Upload Release AAB
      uses: actions/upload-artifact@v4
      with:
        name: release-aab
        path: app/build/outputs/bundle/release/*.aab

  lint:
    name: Run Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Cache Gradle packages
      uses: actions/cache@v4
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Setup Gradle
      uses: gradle/gradle-build-action@v2
      with:
        gradle-version: 8.2

    - name: Setup Gradle Wrapper
      run: |
        # Create gradle wrapper directory if it doesn't exist
        mkdir -p gradle/wrapper
        
        # Download gradle-wrapper.jar if missing
        if [ ! -f gradle/wrapper/gradle-wrapper.jar ]; then
          echo "Downloading gradle-wrapper.jar..."
          curl -L -o gradle/wrapper/gradle-wrapper.jar https://github.com/gradle/gradle/raw/v8.2.0/gradle/wrapper/gradle-wrapper.jar
        fi
        
        # Generate wrapper files if gradlew doesn't exist or is empty
        if [ ! -f gradlew ] || [ ! -s gradlew ]; then
          gradle wrapper --gradle-version 8.2
        fi
        
        # Ensure gradlew is executable
        chmod +x gradlew

    - name: Run lint
      run: |
        # Clean build first to avoid stale cache issues
        ./gradlew clean
        # Run lint with more verbose output
        ./gradlew lint --info

    - name: Upload lint reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-reports
        path: app/build/reports/lint-results*.html

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build, build-bundle]
    if: github.event_name == 'release'

    steps:
    - name: Download Debug APK
      uses: actions/download-artifact@v4
      with:
        name: debug-apk

    - name: Download Release APK
      uses: actions/download-artifact@v4
      with:
        name: release-apk

    - name: Download Release AAB
      uses: actions/download-artifact@v4
      with:
        name: release-aab

    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: |
          *.apk
          *.aab
        body: |
          ## VibeStream Release
          
          ### What's New
          - Bug fixes and improvements
          
          ### Download Options
          - **APK**: Direct installation file for Android devices
          - **AAB**: Android App Bundle for Play Store distribution
          
          ### System Requirements
          - Android 8.0 (API 26) or higher
          
          ### Installation
          1. Download the APK file
          2. Enable "Install from unknown sources" in your device settings
          3. Install the APK file
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}